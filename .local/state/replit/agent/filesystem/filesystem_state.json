{"file_contents":{"README.md":{"content":"Welcome to the NextJS base template bootstrapped using the `create-next-app`. This template supports TypeScript, but you can use normal JavaScript as well.\n\n## Getting Started\n\nHit the run button to start the development server.\n\nYou can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\n[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on `/api/hello`. This endpoint can be edited in `pages/api/hello.ts`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\n## Productionizing your Next App\n\nTo make your next App run smoothly in production make sure to deploy your project with [Repl Deployments](https://docs.replit.com/hosting/deployments/about-deployments)!\n\nYou can also produce a production build by running `npm run build` and [changing the run command](https://docs.replit.com/programming-ide/configuring-repl#run) to `npm run start`.\n","size_bytes":1303},"next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n","size_bytes":211},"next.config.ts":{"content":"import type { NextConfig } from \"next\";\nimport { env } from \"process\";\n\nconst nextConfig: NextConfig = {\n  allowedDevOrigins: [env.REPLIT_DOMAINS.split(\",\")[0]],\n};\n\nmodule.exports = nextConfig;\n","size_bytes":195},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    '@tailwindcss/postcss': {},\n    autoprefixer: {},\n  },\n}","size_bytes":92},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nconst { fontFamily } = require(\"tailwindcss/defaultTheme\")\n\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      fontFamily: {\n        sans: [\"var(--font-manrope)\", ...fontFamily.sans],\n      },\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}","size_bytes":2297},"components/navigation.tsx":{"content":"import Link from 'next/link'\n\nexport default function Navigation() {\n  return (\n    <nav className=\"flex items-center justify-between p-6 bg-white\">\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"text-xl font-bold text-black\">CheckingIn</span>\n      </div>\n      <div className=\"flex items-center space-x-8\">\n        <Link href=\"/\" className=\"text-gray-600 hover:text-black\">\n          Features\n        </Link>\n        <Link href=\"/\" className=\"text-gray-600 hover:text-black\">\n          How it Works\n        </Link>\n        <Link href=\"/\" className=\"text-gray-600 hover:text-black\">\n          Sign In\n        </Link>\n        <Link href=\"/upload\" className=\"bg-black text-white px-4 py-2 rounded-lg hover:bg-gray-800\">\n          Get Started\n        </Link>\n      </div>\n    </nav>\n  )\n}","size_bytes":816},"lib/gemini-vision.ts":{"content":"// From the javascript_gemini integration - leave a comment referencing this integration\nimport { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface HealthMetrics {\n  sleepHours?: number;\n  recoveryPercent?: number;\n  strain?: number;\n  hrv?: number;\n  restingHeartRate?: number;\n  steps?: number;\n  calories?: number;\n  date?: string; // ISO date string from the health data\n}\n\nexport async function extractHealthMetrics(imageBuffer: Buffer, mimeType: string): Promise<HealthMetrics> {\n  try {\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: [\n      {\n        inlineData: {\n          data: imageBuffer.toString(\"base64\"),\n          mimeType: mimeType,\n        },\n      },\n      `You are a health data extraction expert. CAREFULLY analyze this health/fitness screenshot and extract the ACTUAL numerical values visible in the image.\n\nCRITICAL: Look at ALL text, numbers, and labels in the image. Extract the exact numbers you can see, even if they have units, commas, or formatting.\n\nExamples of what to extract:\n- Steps: \"8,964\" → extract as 8964\n- Calories: \"1919\", \"2,150 cal\" → extract as 1919 or 2150\n- Sleep: \"7.5 hrs\", \"8h 23m\" → extract as 7.5 or 8.38\n- Recovery: \"85%\", \"Recovery 72\" → extract as 85 or 72\n- Strain: \"12.5\", \"Strain: 8\" → extract as 12.5 or 8\n- HRV: \"45 ms\", \"HRV 62\" → extract as 45 or 62\n- Heart Rate: \"68 bpm\", \"RHR: 72\" → extract as 68 or 72\n\nIMPORTANT INSTRUCTIONS:\n1. Look at every visible number in the image, including small text\n2. Convert formatted numbers (remove commas, convert \"K\" to thousands)\n3. Extract numbers even if they have units (bpm, ms, %, hrs, cal)\n4. Only return null if the metric truly doesn't exist in the image\n5. Be very precise - extract the exact numbers you see\n\nReturn JSON in this exact format:\n{\n  \"sleepHours\": number or null,\n  \"recoveryPercent\": number or null,\n  \"strain\": number or null,\n  \"hrv\": number or null,\n  \"restingHeartRate\": number or null,\n  \"steps\": number or null,\n  \"calories\": number or null,\n  \"date\": \"YYYY-MM-DD\" or null\n}\n\nIMPORTANT: Also look for the DATE this health data is from. Look for:\n- Date stamps (e.g., \"Sep 28\", \"September 28, 2025\", \"9/28/25\")\n- Day indicators (e.g., \"Today\", \"Yesterday\", \"Monday\")\n- Any date text in the health interface\n\nExtract the date as YYYY-MM-DD format. If you can't find a clear date, return null.`,\n      ],\n    });\n\n    const rawJson = response.text;\n    console.log(`Raw JSON response: ${rawJson}`);\n\n    if (rawJson) {\n      try {\n        // Clean the response - remove markdown code blocks if present\n        let cleanJson = rawJson.trim();\n        if (cleanJson.startsWith('```json')) {\n          cleanJson = cleanJson.replace(/```json\\n?/, '').replace(/\\n?```$/, '');\n        } else if (cleanJson.startsWith('```')) {\n          cleanJson = cleanJson.replace(/```\\n?/, '').replace(/\\n?```$/, '');\n        }\n        \n        const metrics: HealthMetrics = JSON.parse(cleanJson);\n        return metrics;\n      } catch (parseError) {\n        console.error(\"Failed to parse JSON response:\", rawJson);\n        throw new Error(`Invalid JSON response from Gemini: ${parseError}`);\n      }\n    } else {\n      throw new Error(\"Empty response from Gemini\");\n    }\n  } catch (error) {\n    console.error(\"Error extracting health metrics:\", error);\n    throw new Error(`Failed to extract health metrics: ${error}`);\n  }\n}","size_bytes":3488},"lib/prisma.ts":{"content":"import { PrismaClient } from '../generated/prisma';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;","size_bytes":288},"lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}","size_bytes":165},"components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }","size_bytes":1834},"components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1862},"components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":823},"app/analysis/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp, Brain, Heart, Moon, Activity, ArrowRight } from \"lucide-react\";\nimport Link from \"next/link\";\n\nexport default function AnalysisPage() {\n  const [healthData, setHealthData] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // This would fetch the latest health data from your API\n    // For now, we'll simulate with mock data\n    setLoading(false);\n    setHealthData({\n      sleepHours: 7.5,\n      recoveryPercent: 85,\n      strain: 12.3,\n      hrv: 42,\n      restingHeartRate: 58,\n      steps: 8245,\n      calories: 2134\n    });\n  }, []);\n\n  if (loading) {\n    return (\n      <main className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-lg text-gray-600\">Loading your health analysis...</p>\n        </div>\n      </main>\n    );\n  }\n\n  if (!healthData) {\n    return (\n      <main className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50\">\n        <div className=\"container mx-auto px-4 py-16 text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">No Health Data Found</h1>\n          <p className=\"text-lg text-gray-600 mb-8\">Upload a health screenshot to see your analysis.</p>\n          <Link href=\"/upload\">\n            <Button size=\"lg\" className=\"bg-gradient-to-r from-blue-600 to-purple-600\">\n              Upload Screenshot\n            </Button>\n          </Link>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"bg-blue-100 p-4 rounded-full\">\n                <TrendingUp className=\"h-12 w-12 text-blue-600\" />\n              </div>\n            </div>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Your Health Analysis\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              AI-powered insights based on your latest health metrics\n            </p>\n          </div>\n\n          {/* Metrics Grid */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"text-center\">\n              <CardHeader className=\"pb-2\">\n                <Moon className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                <CardTitle className=\"text-lg\">Sleep</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-gray-900\">{healthData.sleepHours}h</p>\n                <p className=\"text-sm text-gray-600\">Good quality</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader className=\"pb-2\">\n                <Heart className=\"h-8 w-8 text-red-600 mx-auto mb-2\" />\n                <CardTitle className=\"text-lg\">Recovery</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-gray-900\">{healthData.recoveryPercent}%</p>\n                <p className=\"text-sm text-gray-600\">Excellent</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader className=\"pb-2\">\n                <Activity className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                <CardTitle className=\"text-lg\">HRV</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-gray-900\">{healthData.hrv}ms</p>\n                <p className=\"text-sm text-gray-600\">Above average</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader className=\"pb-2\">\n                <TrendingUp className=\"h-8 w-8 text-purple-600 mx-auto mb-2\" />\n                <CardTitle className=\"text-lg\">Steps</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-gray-900\">{healthData.steps.toLocaleString()}</p>\n                <p className=\"text-sm text-gray-600\">82% of goal</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Insights */}\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"h-6 w-6 text-purple-600\" />\n                AI Health Insights\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-green-50 border-l-4 border-green-400 p-4 rounded\">\n                <h3 className=\"font-semibold text-green-800 mb-2\">🎉 Great Recovery Score</h3>\n                <p className=\"text-green-700\">Your 85% recovery score indicates excellent adaptation to recent training. Your body is ready for moderate to high intensity activities.</p>\n              </div>\n              \n              <div className=\"bg-blue-50 border-l-4 border-blue-400 p-4 rounded\">\n                <h3 className=\"font-semibold text-blue-800 mb-2\">😴 Optimal Sleep Duration</h3>\n                <p className=\"text-blue-700\">7.5 hours of sleep is within the optimal range. Your sleep consistency is supporting good recovery and cognitive performance.</p>\n              </div>\n              \n              <div className=\"bg-amber-50 border-l-4 border-amber-400 p-4 rounded\">\n                <h3 className=\"font-semibold text-amber-800 mb-2\">💪 Activity Recommendation</h3>\n                <p className=\"text-amber-700\">Based on your current strain and recovery, consider a moderate workout today. Your HRV suggests good autonomic balance.</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/guidance\">\n              <Button size=\"lg\" className=\"bg-gradient-to-r from-green-600 to-blue-600\">\n                Get Personalized Guidance\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </Link>\n            <Link href=\"/journal\">\n              <Button variant=\"outline\" size=\"lg\">\n                Start Journal Entry\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}","size_bytes":6949},"app/api/upload-health-screenshot/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { extractHealthMetrics } from '@/lib/gemini-vision';\nimport { prisma } from '@/lib/prisma';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Parse form data\n    const formData = await request.formData();\n    const file = formData.get('image') as File;\n    \n    if (!file) {\n      return NextResponse.json({ error: 'No image file uploaded' }, { status: 400 });\n    }\n\n    // Convert file to buffer\n    const arrayBuffer = await file.arrayBuffer();\n    const imageBuffer = Buffer.from(arrayBuffer);\n    \n    // Extract health metrics using Gemini Vision\n    const metrics = await extractHealthMetrics(imageBuffer, file.type || 'image/jpeg');\n    \n    // Use the date from the health data, or fall back to today\n    let dataDate = new Date();\n    if (metrics.date) {\n      try {\n        dataDate = new Date(metrics.date);\n        // Validate it's a reasonable date (not in future, not too old)\n        const now = new Date();\n        const oneYearAgo = new Date();\n        oneYearAgo.setFullYear(now.getFullYear() - 1);\n        \n        if (dataDate > now) {\n          console.log(`Date ${metrics.date} is in future, using today instead`);\n          dataDate = new Date();\n        } else if (dataDate < oneYearAgo) {\n          console.log(`Date ${metrics.date} is too old, using today instead`);\n          dataDate = new Date();\n        }\n      } catch (error) {\n        console.log(`Invalid date format: ${metrics.date}, using today instead`);\n        dataDate = new Date();\n      }\n    }\n    dataDate.setHours(0, 0, 0, 0);\n    \n    console.log(`Storing health data for date: ${dataDate.toISOString().split('T')[0]}`);\n    \n    // Store in database (upsert for the actual data date)\n    const healthMetric = await prisma.healthMetric.upsert({\n      where: { date: dataDate },\n      update: {\n        sleepHours: metrics.sleepHours,\n        recoveryPercent: metrics.recoveryPercent,\n        strain: metrics.strain,\n        hrv: metrics.hrv,\n        restingHeartRate: metrics.restingHeartRate,\n        steps: metrics.steps,\n        calories: metrics.calories,\n      },\n      create: {\n        date: dataDate,\n        sleepHours: metrics.sleepHours,\n        recoveryPercent: metrics.recoveryPercent,\n        strain: metrics.strain,\n        hrv: metrics.hrv,\n        restingHeartRate: metrics.restingHeartRate,\n        steps: metrics.steps,\n        calories: metrics.calories,\n      },\n    });\n\n    return NextResponse.json({ \n      success: true, \n      metrics: healthMetric,\n      extractedData: metrics \n    }, { status: 200 });\n    \n  } catch (error) {\n    console.error('Error processing health screenshot:', error);\n    return NextResponse.json({ \n      error: 'Failed to process health screenshot',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}","size_bytes":2885},"app/globals.css":{"content":"@import 'tailwindcss';\n\nbody {\n  background-color: white;\n  color: black;\n  font-family: system-ui, -apple-system, sans-serif;\n}","size_bytes":128},"app/guidance/page.tsx":{"content":"'use client'\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Heart, Brain, Leaf, CheckCircle, Play, Book } from \"lucide-react\";\nimport Link from \"next/link\";\n\nexport default function GuidancePage() {\n  const [completedActions, setCompletedActions] = useState<Set<string>>(new Set());\n\n  const toggleAction = (actionId: string) => {\n    const newCompleted = new Set(completedActions);\n    if (newCompleted.has(actionId)) {\n      newCompleted.delete(actionId);\n    } else {\n      newCompleted.add(actionId);\n    }\n    setCompletedActions(newCompleted);\n  };\n\n  const recommendations = [\n    {\n      id: \"hydration\",\n      title: \"Optimize Hydration\",\n      description: \"Based on your recovery score, increase water intake to support muscle recovery\",\n      action: \"Drink 16oz of water now and set hourly reminders\",\n      category: \"physical\"\n    },\n    {\n      id: \"movement\", \n      title: \"Active Recovery\",\n      description: \"Your HRV suggests you're ready for light movement to boost circulation\",\n      action: \"Take a 10-minute walk or do gentle stretching\",\n      category: \"physical\"\n    },\n    {\n      id: \"nutrition\",\n      title: \"Recovery Nutrition\",\n      description: \"Support your 85% recovery with protein-rich post-workout nutrition\",\n      action: \"Have a protein snack within 2 hours of your workout\",\n      category: \"physical\"\n    }\n  ];\n\n  const mindfulnessTechniques = [\n    {\n      id: \"breathing\",\n      title: \"4-7-8 Breathing\",\n      description: \"Reduce stress and improve sleep quality with this calming technique\",\n      duration: \"5 minutes\",\n      steps: [\n        \"Inhale through nose for 4 counts\",\n        \"Hold breath for 7 counts\", \n        \"Exhale through mouth for 8 counts\",\n        \"Repeat 4-6 cycles\"\n      ]\n    },\n    {\n      id: \"body-scan\",\n      title: \"Progressive Body Scan\",\n      description: \"Release tension and increase body awareness\",\n      duration: \"10 minutes\",\n      steps: [\n        \"Lie down comfortably\",\n        \"Start from your toes, notice any sensations\",\n        \"Slowly move up through each body part\",\n        \"Breathe into areas of tension\"\n      ]\n    }\n  ];\n\n  const journalPrompts = [\n    \"How did I feel physically and mentally today?\",\n    \"What activities gave me the most energy?\",\n    \"What challenges did I overcome today?\",\n    \"What am I grateful for in my health journey?\",\n    \"How can I better support my recovery tomorrow?\"\n  ];\n\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"bg-green-100 p-4 rounded-full\">\n                <Heart className=\"h-12 w-12 text-green-600\" />\n              </div>\n            </div>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Personalized Wellness Guidance\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Tailored recommendations based on your current health metrics and recovery state\n            </p>\n          </div>\n\n          {/* Physical Health Recommendations */}\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Heart className=\"h-6 w-6 text-red-600\" />\n                Physical Wellness Actions\n              </CardTitle>\n              <CardDescription>\n                Immediate steps to optimize your physical health based on today's metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recommendations.map((rec) => (\n                  <div key={rec.id} className=\"flex items-start gap-4 p-4 bg-gray-50 rounded-lg\">\n                    <button\n                      onClick={() => toggleAction(rec.id)}\n                      className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center mt-1 transition-colors ${\n                        completedActions.has(rec.id)\n                          ? 'bg-green-600 border-green-600 text-white'\n                          : 'border-gray-300 hover:border-green-400'\n                      }`}\n                    >\n                      {completedActions.has(rec.id) && <CheckCircle className=\"h-4 w-4\" />}\n                    </button>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 mb-1\">{rec.title}</h3>\n                      <p className=\"text-gray-600 text-sm mb-2\">{rec.description}</p>\n                      <p className=\"text-green-700 font-medium text-sm\">{rec.action}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Mindfulness Techniques */}\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Leaf className=\"h-6 w-6 text-green-600\" />\n                Mindfulness & Stress Relief\n              </CardTitle>\n              <CardDescription>\n                Techniques to enhance mental clarity and reduce stress\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {mindfulnessTechniques.map((technique) => (\n                  <Card key={technique.id} className=\"border-2 border-green-100\">\n                    <CardHeader>\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\n                        <Play className=\"h-5 w-5 text-green-600\" />\n                        {technique.title}\n                      </CardTitle>\n                      <CardDescription>{technique.description}</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-3\">Duration: {technique.duration}</p>\n                      <div className=\"space-y-2\">\n                        {technique.steps.map((step, index) => (\n                          <div key={index} className=\"flex items-start gap-2\">\n                            <span className=\"bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full font-medium\">\n                              {index + 1}\n                            </span>\n                            <p className=\"text-sm text-gray-700\">{step}</p>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Journal Prompts */}\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Book className=\"h-6 w-6 text-purple-600\" />\n                Guided Journal Prompts\n              </CardTitle>\n              <CardDescription>\n                Reflection questions to deepen your wellness journey\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {journalPrompts.map((prompt, index) => (\n                  <div key={index} className=\"bg-purple-50 border-l-4 border-purple-400 p-4 rounded\">\n                    <p className=\"text-purple-800 font-medium\">{prompt}</p>\n                  </div>\n                ))}\n              </div>\n              <div className=\"mt-6 text-center\">\n                <Link href=\"/journal\">\n                  <Button size=\"lg\" className=\"bg-gradient-to-r from-purple-600 to-blue-600\">\n                    Start Journaling\n                    <Book className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Progress Tracking */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"h-6 w-6 text-blue-600\" />\n                Today's Progress\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {completedActions.size} / {recommendations.length}\n                  </p>\n                  <p className=\"text-gray-600\">Actions completed</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-semibold text-green-600\">\n                    {Math.round((completedActions.size / recommendations.length) * 100)}%\n                  </p>\n                  <p className=\"text-gray-600\">Wellness goals</p>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 bg-gray-200 rounded-full h-3\">\n                <div \n                  className=\"bg-gradient-to-r from-green-500 to-blue-500 h-3 rounded-full transition-all duration-300\"\n                  style={{ width: `${(completedActions.size / recommendations.length) * 100}%` }}\n                ></div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </main>\n  );\n}","size_bytes":9658},"app/journal/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n// Using HTML textarea since Textarea component not available\nimport { Input } from \"@/components/ui/input\";\nimport { Book, Save, Calendar, Smile, Meh, Frown, Star } from \"lucide-react\";\n\ninterface WeekStats {\n  totalEntries: number;\n  avgMood: number;\n  streak: number;\n}\n\nexport default function JournalPage() {\n  const [entry, setEntry] = useState(\"\");\n  const [mood, setMood] = useState<number | null>(null);\n  const [gratitude, setGratitude] = useState(\"\");\n  const [goals, setGoals] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [weekStats, setWeekStats] = useState<WeekStats>({ totalEntries: 0, avgMood: 0, streak: 0 });\n\n  const moods = [\n    { value: 5, icon: <Smile className=\"h-6 w-6\" />, label: \"Great\", color: \"text-green-600\" },\n    { value: 4, icon: <Smile className=\"h-6 w-6\" />, label: \"Good\", color: \"text-green-500\" },\n    { value: 3, icon: <Meh className=\"h-6 w-6\" />, label: \"Okay\", color: \"text-yellow-500\" },\n    { value: 2, icon: <Frown className=\"h-6 w-6\" />, label: \"Low\", color: \"text-orange-500\" },\n    { value: 1, icon: <Frown className=\"h-6 w-6\" />, label: \"Poor\", color: \"text-red-500\" },\n  ];\n\n  // Load stats on component mount\n  useEffect(() => {\n    loadWeekStats();\n  }, []);\n\n  // Update stats when form fields change (real-time preview)\n  useEffect(() => {\n    if (mood || entry || gratitude || goals) {\n      // Calculate potential new stats if this entry was saved\n      const potentialNewTotal = weekStats.totalEntries + 1;\n      const potentialNewAvgMood = mood \n        ? ((weekStats.avgMood * weekStats.totalEntries) + mood) / potentialNewTotal\n        : weekStats.avgMood;\n      \n      // Don't update actual stats until saved, just show preview\n      setWeekStats(prev => ({\n        ...prev,\n        // Show preview of what stats would be if saved\n      }));\n    }\n  }, [mood, entry, gratitude, goals]);\n\n  const loadWeekStats = async () => {\n    try {\n      const response = await fetch('/api/journal-entries');\n      const data = await response.json();\n      if (data.stats) {\n        setWeekStats(data.stats);\n      }\n    } catch (error) {\n      console.error('Failed to load week stats:', error);\n    }\n  };\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    \n    try {\n      const response = await fetch('/api/journal-entries', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ mood, entry, gratitude, goals })\n      });\n      \n      if (response.ok) {\n        // Reset form\n        setEntry(\"\");\n        setMood(null);\n        setGratitude(\"\");\n        setGoals(\"\");\n        \n        // Reload stats with new data\n        await loadWeekStats();\n        \n        alert(\"Journal entry saved successfully!\");\n      } else {\n        throw new Error('Failed to save entry');\n      }\n    } catch (error) {\n      console.error('Error saving entry:', error);\n      alert('Failed to save journal entry. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const prompts = [\n    \"How did I feel physically and mentally today?\",\n    \"What activities gave me the most energy?\",\n    \"What challenges did I overcome today?\",\n    \"How well did I take care of my body today?\",\n    \"What did I learn about my health patterns?\",\n    \"How can I better support my wellness tomorrow?\"\n  ];\n\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"bg-purple-100 p-4 rounded-full\">\n                <Book className=\"h-12 w-12 text-purple-600\" />\n              </div>\n            </div>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Wellness Journal\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Reflect on your health journey and track your progress over time\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Journal Entry Form */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Mood Tracker */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Smile className=\"h-6 w-6 text-yellow-600\" />\n                    How are you feeling today?\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex justify-between gap-2\">\n                    {moods.map((moodOption) => (\n                      <button\n                        key={moodOption.value}\n                        onClick={() => setMood(moodOption.value)}\n                        className={`flex flex-col items-center p-3 rounded-lg border-2 transition-all ${\n                          mood === moodOption.value\n                            ? 'border-purple-400 bg-purple-50'\n                            : 'border-gray-200 hover:border-purple-300'\n                        }`}\n                      >\n                        <div className={moodOption.color}>\n                          {moodOption.icon}\n                        </div>\n                        <span className=\"text-sm mt-1 font-medium\">{moodOption.label}</span>\n                      </button>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Main Journal Entry */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-6 w-6 text-blue-600\" />\n                    Today's Reflection\n                  </CardTitle>\n                  <CardDescription>\n                    Write about your wellness journey, challenges, victories, and insights\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <textarea\n                    placeholder=\"How was your day? What did you learn about your health and wellness? Any insights or patterns you noticed?\"\n                    value={entry}\n                    onChange={(e) => setEntry(e.target.value)}\n                    className=\"w-full min-h-32 resize-none p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                    rows={6}\n                  />\n                  <p className=\"text-sm text-gray-500 mt-2\">\n                    {entry.length} characters\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Gratitude Section */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Star className=\"h-6 w-6 text-yellow-600\" />\n                    What are you grateful for?\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Input\n                    placeholder=\"I'm grateful for...\"\n                    value={gratitude}\n                    onChange={(e) => setGratitude(e.target.value)}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Tomorrow's Goals */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Star className=\"h-6 w-6 text-green-600\" />\n                    Tomorrow's Wellness Goal\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Input\n                    placeholder=\"Tomorrow I will focus on...\"\n                    value={goals}\n                    onChange={(e) => setGoals(e.target.value)}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Submit Button */}\n              <Button \n                onClick={handleSubmit}\n                disabled={isSubmitting || (!entry && !mood && !gratitude && !goals)}\n                size=\"lg\"\n                className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n              >\n                {isSubmitting ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Saving Entry...\n                  </div>\n                ) : (\n                  <>\n                    <Save className=\"mr-2 h-4 w-4\" />\n                    Save Journal Entry\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {/* Sidebar with Prompts */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">💡 Writing Prompts</CardTitle>\n                  <CardDescription>\n                    Use these questions to guide your reflection\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {prompts.map((prompt, index) => (\n                      <div key={index} className=\"bg-purple-50 border-l-4 border-purple-400 p-3 rounded\">\n                        <p className=\"text-sm text-purple-800\">{prompt}</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">📊 This Week</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Journal entries</span>\n                      <span className=\"font-semibold\">{weekStats.totalEntries} / 7</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Avg mood</span>\n                      <span className=\"font-semibold\">{weekStats.avgMood} / 5</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Streak</span>\n                      <span className=\"font-semibold\">{weekStats.streak} days</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}","size_bytes":11047},"app/layout.tsx":{"content":"import type { Metadata } from 'next'\nimport './globals.css'\nimport Navigation from '@/components/navigation'\n\nexport const metadata: Metadata = {\n  title: 'CheckingIn - AI Wellness Coach',\n  description: 'Your AI wellness coach that analyzes health data screenshots and provides personalized guidance',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className=\"antialiased\">\n        <Navigation />\n        {children}\n      </body>\n    </html>\n  )\n}","size_bytes":535},"app/page.tsx":{"content":"'use client';\n\nimport Link from \"next/link\";\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Activity, Brain, TrendingUp, TrendingDown, Minus, AlertCircle, CheckCircle2 } from \"lucide-react\";\n\ninterface WellnessInsights {\n  todayStatus: {\n    hasHealthData: boolean;\n    hasMentalHealthData: boolean;\n    mood: number | null;\n    steps: number | null;\n    calories: number | null;\n  };\n  weeklyTrends: {\n    avgMood: number;\n    avgSteps: number;\n    entriesCount: number;\n    healthDataCount: number;\n    moodTrend: 'improving' | 'declining' | 'stable';\n    overallWellnessScore: number;\n  };\n  suggestions: Array<{\n    type: string;\n    priority: 'high' | 'medium' | 'low';\n    title: string;\n    description: string;\n    action: string;\n  }>;\n}\n\nexport default function HomePage() {\n  const [insights, setInsights] = useState<WellnessInsights | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadWellnessInsights();\n  }, []);\n\n  const loadWellnessInsights = async () => {\n    try {\n      const response = await fetch('/api/wellness-insights');\n      if (response.ok) {\n        const data = await response.json();\n        setInsights(data);\n      }\n    } catch (error) {\n      console.error('Failed to load wellness insights:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getMoodEmoji = (mood: number) => {\n    if (mood >= 4) return \"😊\";\n    if (mood >= 3) return \"😐\"; \n    return \"😔\";\n  };\n\n  const getTrendIcon = (trend: string) => {\n    if (trend === 'improving') return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\n    if (trend === 'declining') return <TrendingDown className=\"h-4 w-4 text-red-600\" />;\n    return <Minus className=\"h-4 w-4 text-gray-600\" />;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-black mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading your wellness dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"max-w-6xl mx-auto px-6 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-black mb-4\">\n            Your Wellness Dashboard\n          </h1>\n          <p className=\"text-xl text-gray-600\">\n            Track your complete wellbeing journey - physical health meets mental wellness\n          </p>\n        </div>\n\n        {/* Today's Status */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Today's Check-in</h2>\n          <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"h-5 w-5 text-red-600\" />\n                  Physical Health\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {insights?.todayStatus.hasHealthData ? (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"text-sm text-green-600\">Data uploaded today</span>\n                    </div>\n                    {insights.todayStatus.steps && (\n                      <p className=\"text-lg font-semibold\">{insights.todayStatus.steps.toLocaleString()} steps</p>\n                    )}\n                    {insights.todayStatus.calories && (\n                      <p className=\"text-sm text-gray-600\">{insights.todayStatus.calories} calories</p>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                      <span className=\"text-sm text-orange-500\">No data uploaded today</span>\n                    </div>\n                    <Link href=\"/upload\">\n                      <Button size=\"sm\" variant=\"outline\">Upload Health Screenshot</Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"h-5 w-5 text-purple-600\" />\n                  Mental Health\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {insights?.todayStatus.hasMentalHealthData ? (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"text-sm text-green-600\">Journal entry completed</span>\n                    </div>\n                    {insights.todayStatus.mood && (\n                      <p className=\"text-lg font-semibold flex items-center gap-2\">\n                        {getMoodEmoji(insights.todayStatus.mood)} Feeling {insights.todayStatus.mood}/5\n                      </p>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                      <span className=\"text-sm text-orange-500\">No check-in today</span>\n                    </div>\n                    <Link href=\"/journal\">\n                      <Button size=\"sm\" variant=\"outline\">Mental Health Check-in</Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Weekly Trends */}\n        {insights && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">This Week's Overview</h2>\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-gray-900\">\n                      {insights.weeklyTrends.overallWellnessScore}\n                    </div>\n                    <p className=\"text-sm text-gray-600\">Overall Wellness</p>\n                    <p className=\"text-xs text-gray-500\">out of 10</p>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center gap-2 mb-2\">\n                      {getTrendIcon(insights.weeklyTrends.moodTrend)}\n                      <span className=\"text-2xl font-bold\">{insights.weeklyTrends.avgMood}</span>\n                    </div>\n                    <p className=\"text-sm text-gray-600\">Average Mood</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {insights.weeklyTrends.moodTrend === 'improving' && 'Trending up 📈'}\n                      {insights.weeklyTrends.moodTrend === 'declining' && 'Needs attention 📉'}\n                      {insights.weeklyTrends.moodTrend === 'stable' && 'Stable 📊'}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-900\">\n                      {insights.weeklyTrends.avgSteps.toLocaleString()}\n                    </div>\n                    <p className=\"text-sm text-gray-600\">Daily Steps</p>\n                    <p className=\"text-xs text-gray-500\">average this week</p>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-900\">\n                      {insights.weeklyTrends.entriesCount}\n                    </div>\n                    <p className=\"text-sm text-gray-600\">Journal Entries</p>\n                    <p className=\"text-xs text-gray-500\">this week</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        {/* Personalized Suggestions */}\n        {insights && insights.suggestions.length > 0 && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold mb-4\">Personalized Suggestions</h2>\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              {insights.suggestions.map((suggestion, index) => (\n                <Card key={index} className={`${\n                  suggestion.priority === 'high' ? 'border-red-200 bg-red-50' :\n                  suggestion.priority === 'medium' ? 'border-orange-200 bg-orange-50' :\n                  'border-blue-200 bg-blue-50'\n                }`}>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{suggestion.title}</CardTitle>\n                    <CardDescription>{suggestion.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm font-medium text-gray-700\">{suggestion.action}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Quick Actions */}\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Quick Actions</h2>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/upload\">\n              <Button className=\"bg-black text-white hover:bg-gray-800\">\n                <Activity className=\"mr-2 h-4 w-4\" />\n                Upload Health Data\n              </Button>\n            </Link>\n            <Link href=\"/journal\">\n              <Button variant=\"outline\">\n                <Brain className=\"mr-2 h-4 w-4\" />\n                Mental Health Check-in\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10711},"app/upload/page.tsx":{"content":"'use client'\n\nimport { useState, useCallback } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\ninterface HealthMetrics {\n  sleepHours?: number;\n  recoveryPercent?: number;\n  strain?: number;\n  hrv?: number;\n  restingHeartRate?: number;\n  steps?: number;\n  calories?: number;\n}\n\nexport default function UploadPage() {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadResult, setUploadResult] = useState<{\n    success: boolean;\n    metrics?: HealthMetrics;\n    error?: string;\n  } | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const router = useRouter();\n\n  const handleFileSelect = useCallback((file: File) => {\n    setSelectedFile(file);\n    setUploadResult(null);\n    \n    // Create preview URL\n    const url = URL.createObjectURL(file);\n    setPreviewUrl(url);\n  }, []);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  };\n\n  const handleDrop = useCallback((event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    setIsDragOver(false);\n    \n    const files = event.dataTransfer.files;\n    if (files.length > 0) {\n      const file = files[0];\n      if (file.type.startsWith('image/')) {\n        handleFileSelect(file);\n      }\n    }\n  }, [handleFileSelect]);\n\n  const handleDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleUpload = async () => {\n    if (!selectedFile) return;\n\n    setIsUploading(true);\n    setUploadResult(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('image', selectedFile);\n\n      const response = await fetch('/api/upload-health-screenshot', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        setUploadResult({\n          success: true,\n          metrics: result.extractedData,\n        });\n      } else {\n        setUploadResult({\n          success: false,\n          error: result.error || 'Upload failed',\n        });\n      }\n    } catch (error) {\n      setUploadResult({\n        success: false,\n        error: error instanceof Error ? error.message : 'Upload failed',\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleViewAnalysis = () => {\n    router.push('/analysis');\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-8\">\n      <h1 className=\"text-2xl font-bold mb-8\">Upload Health Screenshot</h1>\n      \n      <div className={`border-2 border-dashed rounded-lg p-8 text-center mb-6 ${\n        isDragOver ? 'border-blue-400 bg-blue-50' : 'border-gray-300'\n      }`}\n           onDrop={handleDrop}\n           onDragOver={handleDragOver}\n           onDragLeave={handleDragLeave}>\n        \n        {previewUrl ? (\n          <div className=\"mb-4\">\n            <img src={previewUrl} alt=\"Preview\" className=\"max-w-full h-48 object-cover mx-auto rounded\" />\n          </div>\n        ) : (\n          <div className=\"mb-4\">\n            <p className=\"text-gray-600\">Drag and drop your health screenshot here, or click to browse</p>\n          </div>\n        )}\n        \n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleInputChange}\n          className=\"hidden\"\n          id=\"file-input\"\n        />\n        <label htmlFor=\"file-input\" className=\"bg-blue-500 text-white px-4 py-2 rounded cursor-pointer hover:bg-blue-600\">\n          Choose File\n        </label>\n      </div>\n\n      {selectedFile && (\n        <div className=\"mb-6\">\n          <p className=\"text-sm text-gray-600 mb-2\">Selected: {selectedFile.name}</p>\n          <button\n            onClick={handleUpload}\n            disabled={isUploading}\n            className=\"bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600 disabled:bg-gray-400\"\n          >\n            {isUploading ? 'Analyzing...' : 'Upload & Analyze'}\n          </button>\n        </div>\n      )}\n\n      {uploadResult && (\n        <div className=\"border rounded p-4\">\n          {uploadResult.success ? (\n            <div>\n              <h3 className=\"text-green-600 font-semibold mb-4\">Analysis Complete!</h3>\n              {uploadResult.metrics && (\n                <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                  {uploadResult.metrics.sleepHours && (\n                    <div className=\"border p-3 rounded\">\n                      <div className=\"text-sm text-gray-600\">Sleep Hours</div>\n                      <div className=\"font-bold\">{uploadResult.metrics.sleepHours}h</div>\n                    </div>\n                  )}\n                  {uploadResult.metrics.recoveryPercent && (\n                    <div className=\"border p-3 rounded\">\n                      <div className=\"text-sm text-gray-600\">Recovery</div>\n                      <div className=\"font-bold\">{uploadResult.metrics.recoveryPercent}%</div>\n                    </div>\n                  )}\n                  {uploadResult.metrics.steps && (\n                    <div className=\"border p-3 rounded\">\n                      <div className=\"text-sm text-gray-600\">Steps</div>\n                      <div className=\"font-bold\">{uploadResult.metrics.steps.toLocaleString()}</div>\n                    </div>\n                  )}\n                  {uploadResult.metrics.calories && (\n                    <div className=\"border p-3 rounded\">\n                      <div className=\"text-sm text-gray-600\">Calories</div>\n                      <div className=\"font-bold\">{uploadResult.metrics.calories}</div>\n                    </div>\n                  )}\n                </div>\n              )}\n              <button\n                onClick={handleViewAnalysis}\n                className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n              >\n                View Full Analysis\n              </button>\n            </div>\n          ) : (\n            <div className=\"text-red-600\">\n              <h3 className=\"font-semibold mb-2\">Upload Failed</h3>\n              <p className=\"text-sm\">{uploadResult.error}</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6526},"replit.md":{"content":"# Overview\n\nCheckingIn is an AI-powered wellness coaching application built with Next.js that analyzes health data screenshots to provide personalized wellness insights and guidance. The application allows users to upload health screenshots (from fitness trackers, health apps, etc.), extracts relevant health metrics using Google's Gemini AI vision capabilities, and provides personalized coaching recommendations based on the analyzed data.\n\nThe platform features health data analysis, personalized guidance generation, wellness journaling, and progress tracking to create a comprehensive wellness coaching experience.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: Next.js 15 with App Router and TypeScript\n- **Styling**: TailwindCSS with custom design system using CSS variables for theming\n- **UI Components**: Custom component library built with Radix UI primitives and class-variance-authority for consistent styling\n- **State Management**: React's built-in useState and useEffect for client-side state management\n- **File Handling**: Native HTML5 file input with drag-and-drop support for image uploads\n\n## Backend Architecture  \n- **API Layer**: Next.js API routes handling file uploads and health data processing\n- **Image Processing**: Server-side image analysis using Google Gemini Vision API to extract health metrics from screenshots\n- **Data Models**: Structured health metrics including sleep hours, recovery percentage, strain, HRV, heart rate, steps, and calories\n- **File Upload**: Formidable library for handling multipart form data and image file processing\n\n## Data Storage\n- **Database**: Prisma ORM configured for database abstraction with generated client\n- **Schema**: Three main models - HealthMetric (physical data), MentalHealth (wellness tracking), and Insight (AI-generated recommendations)\n- **Data Persistence**: Daily health metric storage with upsert functionality to prevent duplicates\n\n## Authentication & Security\n- **Current State**: No authentication system implemented - designed as single-user prototype\n- **File Security**: Server-side file validation and processing with temporary buffer storage\n- **API Security**: Basic request validation and error handling\n\n# External Dependencies\n\n## AI Services\n- **Google Gemini AI**: Vision API for analyzing health screenshots and extracting numerical metrics\n- **Configuration**: Requires GEMINI_API_KEY environment variable for API access\n\n## Database Integration\n- **Prisma**: ORM for database operations with generated TypeScript client\n- **Database Provider**: Configured for flexible database backend (SQLite for development, can be extended to PostgreSQL for production)\n\n## UI & Styling\n- **Radix UI**: Accessible component primitives for buttons, cards, and form inputs\n- **Lucide React**: Icon library for consistent iconography throughout the application\n- **Google Fonts**: Manrope font family integration for typography\n\n## Development Tools\n- **TypeScript**: Full type safety across frontend and backend\n- **ESLint**: Next.js core web vitals configuration for code quality\n- **PostCSS**: CSS processing with TailwindCSS and Autoprefixer plugins\n\n## Deployment Configuration\n- **Replit Optimized**: Custom Next.js configuration for Replit deployment environment\n- **Port Configuration**: Development and production servers configured for port 5000 with hostname binding","size_bytes":3466},"app/api/journal-entries/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { mood, entry, gratitude, goals } = body;\n\n    // Create journal entry\n    const journalEntry = await prisma.mentalHealth.create({\n      data: {\n        date: new Date(),\n        mood: mood || 3,\n        anxiety: 3, // default neutral values\n        energy: 3,\n        stress: 3, \n        focus: 3,\n        journal: entry || null,\n        gratitude: gratitude || null,\n        triggers: goals || null, // using triggers field for goals temporarily\n      }\n    });\n\n    return NextResponse.json({ success: true, entry: journalEntry });\n  } catch (error) {\n    console.error('Error saving journal entry:', error);\n    return NextResponse.json(\n      { error: 'Failed to save journal entry', details: String(error) },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET() {\n  try {\n    // Get journal entries for the current week\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    \n    const entries = await prisma.mentalHealth.findMany({\n      where: {\n        date: {\n          gte: weekAgo\n        }\n      },\n      orderBy: {\n        date: 'desc'\n      }\n    });\n\n    // Calculate stats\n    const totalEntries = entries.length;\n    const entriesWithMood = entries.filter(entry => entry.mood !== null);\n    const avgMood = entriesWithMood.length > 0 \n      ? entriesWithMood.reduce((sum, entry) => sum + (entry.mood || 0), 0) / entriesWithMood.length\n      : 0;\n    \n    // Calculate streak (consecutive days with entries)\n    const allEntries = await prisma.mentalHealth.findMany({\n      orderBy: { date: 'desc' }\n    });\n    \n    let streak = 0;\n    const today = new Date();\n    for (let i = 0; i < allEntries.length; i++) {\n      const entryDate = new Date(allEntries[i].date);\n      const expectedDate = new Date(today);\n      expectedDate.setDate(today.getDate() - i);\n      \n      if (entryDate.toDateString() === expectedDate.toDateString()) {\n        streak++;\n      } else {\n        break;\n      }\n    }\n\n    return NextResponse.json({\n      entries,\n      stats: {\n        totalEntries,\n        avgMood: Number(avgMood.toFixed(1)),\n        streak\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching journal entries:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch journal entries' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":2514},"app/api/wellness-insights/route.ts":{"content":"import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n  try {\n    // Get recent health metrics and mental health data\n    const today = new Date();\n    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n    \n    // Get latest health metrics\n    const recentHealthMetrics = await prisma.healthMetric.findMany({\n      where: {\n        date: {\n          gte: weekAgo\n        }\n      },\n      orderBy: {\n        date: 'desc'\n      },\n      take: 7\n    });\n\n    // Get recent mental health entries\n    const recentMentalHealth = await prisma.mentalHealth.findMany({\n      where: {\n        date: {\n          gte: weekAgo\n        }\n      },\n      orderBy: {\n        date: 'desc'\n      },\n      take: 7\n    });\n\n    // Calculate today's status\n    const todayHealthMetrics = recentHealthMetrics.find(m => \n      m.date.toDateString() === today.toDateString()\n    );\n    const todayMentalHealth = recentMentalHealth.find(m => \n      m.date.toDateString() === today.toDateString()\n    );\n\n    // Calculate weekly trends\n    const weeklyMoodTrend = recentMentalHealth.length > 0 \n      ? recentMentalHealth.reduce((sum, entry) => sum + entry.mood, 0) / recentMentalHealth.length\n      : 0;\n\n    const weeklyStepsTrend = recentHealthMetrics.length > 0\n      ? recentHealthMetrics\n          .filter(m => m.steps !== null)\n          .reduce((sum, entry) => sum + (entry.steps || 0), 0) / \n        Math.max(1, recentHealthMetrics.filter(m => m.steps !== null).length)\n      : 0;\n\n    // Generate suggestions based on data\n    const suggestions = generateSuggestions(recentHealthMetrics, recentMentalHealth, weeklyMoodTrend);\n\n    // Calculate overall wellness score\n    const physicalScore = calculatePhysicalWellnessScore(recentHealthMetrics);\n    const mentalScore = weeklyMoodTrend * 2; // Convert 1-5 scale to 1-10\n    const overallScore = Math.round(((physicalScore + mentalScore) / 2) * 10) / 10;\n\n    return NextResponse.json({\n      todayStatus: {\n        hasHealthData: !!todayHealthMetrics,\n        hasMentalHealthData: !!todayMentalHealth,\n        mood: todayMentalHealth?.mood || null,\n        steps: todayHealthMetrics?.steps || null,\n        calories: todayHealthMetrics?.calories || null\n      },\n      weeklyTrends: {\n        avgMood: Math.round(weeklyMoodTrend * 10) / 10,\n        avgSteps: Math.round(weeklyStepsTrend),\n        entriesCount: recentMentalHealth.length,\n        healthDataCount: recentHealthMetrics.length,\n        moodTrend: calculateMoodTrend(recentMentalHealth),\n        overallWellnessScore: overallScore\n      },\n      suggestions,\n      weeklyData: {\n        mentalHealth: recentMentalHealth.map(entry => ({\n          date: entry.date,\n          mood: entry.mood,\n          gratitude: entry.gratitude\n        })),\n        physicalHealth: recentHealthMetrics.map(metric => ({\n          date: metric.date,\n          steps: metric.steps,\n          calories: metric.calories,\n          sleepHours: metric.sleepHours,\n          recoveryPercent: metric.recoveryPercent\n        }))\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching wellness insights:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch wellness insights' },\n      { status: 500 }\n    );\n  }\n}\n\nfunction generateSuggestions(healthMetrics: any[], mentalHealth: any[], avgMood: number) {\n  const suggestions = [];\n\n  // Mental health suggestions\n  if (avgMood < 3) {\n    suggestions.push({\n      type: 'mental',\n      priority: 'high',\n      title: 'Focus on Mental Wellness',\n      description: 'Your mood has been lower this week. Consider practicing mindfulness or reaching out to someone you trust.',\n      action: 'Try journaling about positive moments or speaking with a counselor'\n    });\n  } else if (avgMood > 4) {\n    suggestions.push({\n      type: 'mental',\n      priority: 'low',\n      title: 'Maintain Your Positive Momentum',\n      description: 'You\\'re doing great this week! Keep up the habits that are working for you.',\n      action: 'Consider sharing what\\'s working well with others'\n    });\n  }\n\n  // Physical health suggestions\n  const recentSteps = healthMetrics.filter(m => m.steps !== null);\n  if (recentSteps.length > 0) {\n    const avgSteps = recentSteps.reduce((sum, m) => sum + (m.steps || 0), 0) / recentSteps.length;\n    \n    if (avgSteps < 6000) {\n      suggestions.push({\n        type: 'physical',\n        priority: 'medium',\n        title: 'Increase Daily Movement',\n        description: 'Your step count has been below recommended levels. Try to incorporate more walking into your routine.',\n        action: 'Aim for 7,000+ steps daily with short walks throughout the day'\n      });\n    }\n  }\n\n  // Sleep suggestions\n  const recentSleep = healthMetrics.filter(m => m.sleepHours !== null);\n  if (recentSleep.length > 0) {\n    const avgSleep = recentSleep.reduce((sum, m) => sum + (m.sleepHours || 0), 0) / recentSleep.length;\n    \n    if (avgSleep < 7) {\n      suggestions.push({\n        type: 'physical',\n        priority: 'high',\n        title: 'Prioritize Better Sleep',\n        description: 'You\\'re averaging less than 7 hours of sleep. Quality sleep is crucial for both physical and mental health.',\n        action: 'Try setting a consistent bedtime and avoiding screens 1 hour before sleep'\n      });\n    }\n  }\n\n  // Recovery suggestions\n  const recentRecovery = healthMetrics.filter(m => m.recoveryPercent !== null);\n  if (recentRecovery.length > 0) {\n    const avgRecovery = recentRecovery.reduce((sum, m) => sum + (m.recoveryPercent || 0), 0) / recentRecovery.length;\n    \n    if (avgRecovery < 70) {\n      suggestions.push({\n        type: 'recovery',\n        priority: 'medium',\n        title: 'Focus on Recovery',\n        description: 'Your recovery scores suggest you may need more rest or stress management.',\n        action: 'Consider lighter workouts and stress-reduction techniques like meditation'\n      });\n    }\n  }\n\n  return suggestions.slice(0, 3); // Return top 3 suggestions\n}\n\nfunction calculatePhysicalWellnessScore(metrics: any[]) {\n  if (metrics.length === 0) return 5; // neutral score\n\n  let score = 5;\n  let factors = 0;\n\n  // Steps factor\n  const stepsData = metrics.filter(m => m.steps !== null);\n  if (stepsData.length > 0) {\n    const avgSteps = stepsData.reduce((sum, m) => sum + (m.steps || 0), 0) / stepsData.length;\n    if (avgSteps >= 10000) score += 1.5;\n    else if (avgSteps >= 7000) score += 0.5;\n    else if (avgSteps < 5000) score -= 1;\n    factors++;\n  }\n\n  // Sleep factor\n  const sleepData = metrics.filter(m => m.sleepHours !== null);\n  if (sleepData.length > 0) {\n    const avgSleep = sleepData.reduce((sum, m) => sum + (m.sleepHours || 0), 0) / sleepData.length;\n    if (avgSleep >= 7 && avgSleep <= 9) score += 1.5;\n    else if (avgSleep >= 6) score += 0.5;\n    else score -= 1;\n    factors++;\n  }\n\n  // Recovery factor\n  const recoveryData = metrics.filter(m => m.recoveryPercent !== null);\n  if (recoveryData.length > 0) {\n    const avgRecovery = recoveryData.reduce((sum, m) => sum + (m.recoveryPercent || 0), 0) / recoveryData.length;\n    if (avgRecovery >= 80) score += 1.5;\n    else if (avgRecovery >= 70) score += 0.5;\n    else if (avgRecovery < 60) score -= 1;\n    factors++;\n  }\n\n  return Math.max(1, Math.min(10, score));\n}\n\nfunction calculateMoodTrend(entries: any[]) {\n  if (entries.length < 2) return 'stable';\n  \n  const sortedEntries = [...entries].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  const firstHalf = sortedEntries.slice(0, Math.ceil(sortedEntries.length / 2));\n  const secondHalf = sortedEntries.slice(Math.ceil(sortedEntries.length / 2));\n  \n  const firstHalfAvg = firstHalf.reduce((sum, e) => sum + e.mood, 0) / firstHalf.length;\n  const secondHalfAvg = secondHalf.reduce((sum, e) => sum + e.mood, 0) / secondHalf.length;\n  \n  const diff = secondHalfAvg - firstHalfAvg;\n  \n  if (diff > 0.5) return 'improving';\n  if (diff < -0.5) return 'declining';\n  return 'stable';\n}","size_bytes":8015}},"version":1}